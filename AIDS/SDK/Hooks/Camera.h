#pragma once
#include <wtypes.h>
#include <vector>
#include <windows.h>
#include <dwmapi.h>
#include <d3d9.h>
#include "../Memory.h"

DWORD cameraBaseAddr = 0x040F604C;
std::vector<DWORD> cameraOffsets{ 0x64, 0x48, 0x4 };
DWORD CamYOffset = 0x4;

DWORD CameraAddr;

struct Camera {
	float x = 0.00f;
	float y = 0.00f;
};

Camera camera;

void updateCamera() {
	CameraAddr = mem->GetPointerAddress(cameraBaseAddr, cameraOffsets);
	ReadProcessMemory(mem->hProcess, (void*)(CameraAddr), &camera.x, sizeof(int), NULL);
	ReadProcessMemory(mem->hProcess, (void*)(CameraAddr + CamYOffset), &camera.y, sizeof(int), NULL);
}

void writeCamera() {
	WriteProcessMemory(mem->hProcess, (void*)(CameraAddr), &camera.x, sizeof(int), NULL);
	WriteProcessMemory(mem->hProcess, (void*)(CameraAddr + CamYOffset), &camera.y, sizeof(int), NULL);
}